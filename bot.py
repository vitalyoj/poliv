import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import requests
import json
from datetime import time
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8141615617:AAEBJ86u9rx0g1peCutLwWkL2gA1nw3QVL4"
ESP_IP = "http://192.168.1.100"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ IP ESP
ESP_PORT = "80"  # –ü–æ—Ä—Ç ESP
ESP_ENDPOINTS = {
    "moisture": "/moisture",
    "light": "/light",
    "pump": "/pump",
    "status": "/status",
    "schedule": "/schedule"
}

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PlantMonitorBot:
    def __init__(self):
        self.base_url = f"{ESP_IP}:{ESP_PORT}"
        self.authorized_users = set() 
        self.default_password = "plant123"

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
        user = update.effective_user
        welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–ª–∏–≤–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /auth."
        )
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/auth - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ\n"
            "/status - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n"
            "/moisture - –¢–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã\n"
            "/light - –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "/pump_on - –í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å–æ—Å\n"
            "/pump_off - –í—ã–∫–ª—é—á–∏—Ç—å –Ω–∞—Å–æ—Å\n"
            "/pump_time - –í–∫–ª—é—á–∏—Ç—å –Ω–∞—Å–æ—Å –Ω–∞ N —Å–µ–∫—É–Ω–¥\n"
            "/set_schedule - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞\n"
            "/get_schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "/cancel_schedule - –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞\n"
        )
        await update.message.reply_text(help_text)

    async def auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if update.effective_user.id in self.authorized_users:
            await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        if context.args and context.args[0] == self.default_password:
            self.authorized_users.add(update.effective_user.id)
            await update.message.reply_text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–æ–π.")
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /auth.\n"
                "–ü—Ä–∏–º–µ—Ä: /auth plant123"
            )

    def check_auth(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in self.authorized_users

    async def send_esp_request(self, endpoint: str, params: dict = None) -> dict:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ ESP –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
        url = f"{self.base_url}{endpoint}"
        try:
            response = requests.get(url, params=params, timeout=10)
            return response.json()
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ESP: {e}")
            return {"error": str(e)}

    async def get_system_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        data = await self.send_esp_request(ESP_ENDPOINTS["status"])
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        status_text = (
            "üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:\n\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {data.get('moisture', 'N/A')}%\n"
            f"‚òÄÔ∏è –£—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏: {data.get('light', 'N/A')} lux\n"
            f"üöø –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞—Å–æ—Å–∞: {'–í–ö–õ' if data.get('pump_status', False) else '–í–´–ö–õ'}\n"
            f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {'–ê–∫—Ç–∏–≤–Ω–æ' if data.get('schedule_active', False) else '–ù–µ –∞–∫—Ç–∏–≤–Ω–æ'}\n"
            f"üïí –í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞: {data.get('schedule_time', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}\n"
            f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: {data.get('last_watered', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ')}"
            )
        await update.message.reply_text(status_text)

    async def get_moisture(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        data = await self.send_esp_request(ESP_ENDPOINTS["moisture"])
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        moisture = data.get("moisture", "N/A")
        await update.message.reply_text(f"üíß –¢–µ–∫—É—â–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –ø–æ—á–≤—ã: {moisture}%")

    async def get_light(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        data = await self.send_esp_request(ESP_ENDPOINTS["light"])
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        light = data.get("light", "N/A")
        await update.message.reply_text(f"‚òÄÔ∏è –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç–∏: {light} lux")

    async def pump_on(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å–æ—Å"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        data = await self.send_esp_request(ESP_ENDPOINTS["pump"], {"state": "on"})
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        await update.message.reply_text("üöø –ù–∞—Å–æ—Å –≤–∫–ª—é—á–µ–Ω!")

    async def pump_off(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í—ã–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å–æ—Å"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        data = await self.send_esp_request(ESP_ENDPOINTS["pump"], {"state": "off"})
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        await update.message.reply_text("üöø –ù–∞—Å–æ—Å –≤—ã–∫–ª—é—á–µ–Ω!")

    async def pump_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç –Ω–∞—Å–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        if not context.args or not context.args[0].isdigit():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–∞—Å–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.\n–ü—Ä–∏–º–µ—Ä: /pump_time 10")
            return
        
        seconds = int(context.args[0])
        data = await self.send_esp_request(ESP_ENDPOINTS["pump"], {"state": "time", "time": seconds})
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        await update.message.reply_text(f"üöø –ù–∞—Å–æ—Å –≤–∫–ª—é—á–µ–Ω –Ω–∞ {seconds} —Å–µ–∫—É–Ω–¥!")

    async def set_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        if not context.args or len(context.args) < 2:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª–∏–≤–∞ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª.\n"
                "–§–æ—Ä–º–∞—Ç: /set_schedule HH:MM –∏–Ω—Ç–µ—Ä–≤–∞–ª_–≤_—á–∞—Å–∞—Ö\n"
                "–ü—Ä–∏–º–µ—Ä: /set_schedule 08:00 24 (–ø–æ–ª–∏–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8 —É—Ç—Ä–∞)"
            )
            return
        
        time_str = context.args[0]
        interval = context.args[1]
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
            hours, minutes = map(int, time_str.split(':'))
            if not (0 <= hours < 24 and 0 <= minutes < 60):
                raise ValueError
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00")
            return
        
        if not interval.isdigit():
            await update.message.reply_text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (—á–∞—Å—ã)")
            return
        
        data = await self.send_esp_request(
            ESP_ENDPOINTS["schedule"],
            {"action": "set", "time": time_str, "interval": interval}
        )
        
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        await update.message.reply_text(
            f"‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞: {time_str}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {interval} —á–∞—Å–æ–≤"
        )

    async def get_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        data = await self.send_esp_request(ESP_ENDPOINTS["schedule"], {"action": "get"})
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        if data.get("active", False):
            schedule_text = (
                "‚è∞ –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"
                f"üïí –í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞: {data.get('time', 'N/A')}\n"
                f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {data.get('interval', 'N/A')} —á–∞—Å–æ–≤\n"
                f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–ª–∏–≤: {data.get('next_watering', 'N/A')}"
            )
        else:
            schedule_text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        
        await update.message.reply_text(schedule_text)

    async def cancel_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        data = await self.send_esp_request(ESP_ENDPOINTS["schedule"], {"action": "cancel"})
        if "error" in data:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {data['error']}")
            return
        
        await update.message.reply_text("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–∏–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!")

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "status":
            await self.get_system_status(update, context)
        elif query.data == "moisture":
            await self.get_moisture(update, context)
        elif query.data == "light":
            await self.get_light(update, context)
        elif query.data == "pump_on":
            await self.pump_on(update, context)
        elif query.data == "pump_off":
            await self.pump_off(update, context)

    async def show_control_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        if not self.check_auth(update.effective_user.id):
            await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            return
        
        keyboard = [
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
                InlineKeyboardButton("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", callback_data="moisture"),
                InlineKeyboardButton("‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å", callback_data="light"),
            ],
            [
                InlineKeyboardButton("üöø –í–∫–ª –Ω–∞—Å–æ—Å", callback_data="pump_on"),
                InlineKeyboardButton("üöø –í—ã–∫–ª –Ω–∞—Å–æ—Å", callback_data="pump_off"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    bot = PlantMonitorBot()
    
    # –°–æ–∑–¥–∞–µ–º Application –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("auth", bot.auth))
    application.add_handler(CommandHandler("status", bot.get_system_status))
    application.add_handler(CommandHandler("moisture", bot.get_moisture))
    application.add_handler(CommandHandler("light", bot.get_light))
    application.add_handler(CommandHandler("pump_on", bot.pump_on))
    application.add_handler(CommandHandler("pump_off", bot.pump_off))
    application.add_handler(CommandHandler("pump_time", bot.pump_time))
    application.add_handler(CommandHandler("set_schedule", bot.set_schedule))
    application.add_handler(CommandHandler("get_schedule", bot.get_schedule))
    application.add_handler(CommandHandler("cancel_schedule", bot.cancel_schedule))
    application.add_handler(CommandHandler("panel", bot.show_control_panel))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()